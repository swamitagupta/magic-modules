userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
if err != nil {
    log.Printf("[ERROR] Error generating user agent string: %s", err)
    return err
}
url, err := tpgresource.ReplaceVars(d, config, "{{"{{"}}VmwareengineBasePath{{"}}"}}projects/{{"{{"}}project{{"}}"}}/locations/global/dnsBindPermission")
if err != nil {
    log.Printf("[ERROR] Error replacing vars in URL: %s", err)
    return err
}
log.Printf("[DEBUG] Generated URL: %s", url)

billingProject := ""
project, err = tpgresource.GetProject(d, config)
if err != nil {
    log.Printf("[ERROR] Error fetching project: %s", err)
    return fmt.Errorf("Error fetching project for DnsBindPermission: %s", err)
}
billingProject = project
log.Printf("[DEBUG] Fetched project: %s", project)

// err == nil indicates that the billing_project value was found
if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
    log.Printf("[DEBUG] Found billing project: %s", bp)
    billingProject = bp
} else {
    log.Printf("[DEBUG] No billing project found, using project: %s", billingProject)
}
principalsProp := d.Get("principals")
if v, ok := d.GetOkExists("principals"); !tpgresource.IsEmptyValue(reflect.ValueOf(principalsProp)) && (ok || !reflect.DeepEqual(v, principalsProp)) {
    principals, ok := principalsProp.([]interface{})
    if !ok {
        return fmt.Errorf("principalsProp is not a slice of interface{}: %T", principalsProp)
    }
    log.Printf("[DEBUG] Granting principals: %+v", principals)
    err = grantPrincipals(config, d, url, billingProject, principals, userAgent)
    if err != nil {
        log.Printf("[ERROR] Error granting principals: %s", err)
        return err
    }
}
id, err := tpgresource.ReplaceVars(d, config, "projects/{{"{{"}}project{{"}}"}}/locations/global/dnsBindPermission")
if err != nil {
    log.Printf("[ERROR] Error constructing id: %s", err)
    return fmt.Errorf("Error constructing id: %s", err)
}
d.SetId(id)
log.Printf("[DEBUG] Finished creating DnsBindPermission %q", d.Id())
return resourceVmwareengineDnsBindPermissionRead(d, meta)